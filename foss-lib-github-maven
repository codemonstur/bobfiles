
-- Generates release notes in src/docs/releases/release-{version}.txt
release-notes
    info [${PROJECT_NAME}] Writing release notes to src/docs/releases/release-${PROJECT_VERSION}.txt
    echo ${PROJECT_VERSION} > src/docs/releases/release-${PROJECT_VERSION}.txt
    echo "" >> src/docs/releases/release-${PROJECT_VERSION}.txt
    PREVIOUS_TAG = `git tag | sort -r | head -n 1`
    git log --pretty="%s" ${PREVIOUS_TAG}... >> src/docs/releases/release-${PROJECT_VERSION}.txt

-- Performs; clean, build, tag repo with version, push and finally upload binaries to Github and MavenCentral
deploy
    EXISTS_RELEASE_NOTES = `ls src/docs/releases/release-${PROJECT_VERSION}.txt 2>/dev/null | wc -l`
    if (${EXISTS_RELEASE_NOTES} != 1)
        run-task release-notes
        error Release notes need to be prepared first
        fail
    endif
    info [${PROJECT_NAME}] Clean and build for deploy
    run-task clean build

    # Most likely to fail so we do this first
    info [${PROJECT_NAME}] Creating maven central release
    run-task deploy-maven

    # If we can push to MavenCentral we will probably be able to push to Github as well
    info [${PROJECT_NAME}] Creating github release
    run-task deploy-github

    # And now that we have deployed we mark the git repo
    info [${PROJECT_NAME}] Tagging and pushing to github
    git tag ${PROJECT_NAME}-${PROJECT_VERSION}
    git push && git push --tags

-- Removes the current tag from git locally and remotely
remove-tag
  - git tag -d ${PROJECT_NAME}-${PROJECT_VERSION}
  - git push --delete origin ${PROJECT_NAME}-${PROJECT_VERSION}

-- Uploads binaries to Github
deploy-github
    info [${PROJECT_NAME}] Uploading to Github
    hub release create -a target/${PROJECT_NAME}.jar -F src/docs/releases/release-${PROJECT_VERSION}.txt ${PROJECT_NAME}-${PROJECT_VERSION}

-- Uploads binaries to MavenCentral
deploy-maven
    info [${PROJECT_NAME}] Uploading to MavenCentral
    jar-sources
    jar-javadoc
    deploy-maven-central
    HAS_POM = `ls -a pom.xml 2>/dev/null | wc -l`
    if (${HAS_POM} == 1)
        sed -E -i 's/<version>[0-9.]+<\/version>/<version>${PROJECT_VERSION}<\/version>/g' README.md
    endif

-- Attempts to turn local build jar into native executable using Graal RC 14
graal
    docker run -it --mount type=bind,src=`pwd`,dst=/data -w /data oracle/graalvm-ce:1.0.0-rc14 native-image --static --no-server -jar target/${PROJECT_NAME}.jar target/${PROJECT_NAME}
